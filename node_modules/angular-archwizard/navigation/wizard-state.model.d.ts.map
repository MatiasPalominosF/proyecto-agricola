{"version":3,"file":"wizard-state.model.d.ts","sources":["wizard-state.model.d.ts"],"names":[],"mappingssourcesContent":["import { WizardStep } from '../util/wizard-step.interface';\nimport { MovingDirection } from '../util/moving-direction.enum';\nimport { NavigationMode } from './navigation-mode.interface';\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\nexport declare class WizardState {\n    /**\n     * The initial step index, as taken from the [[WizardComponent]]\n     */\n    private _defaultStepIndex;\n    /**\n     * An array representation of all wizard steps belonging to this model\n     */\n    wizardSteps: Array<WizardStep>;\n    /**\n     * The initial step index.\n     * This value can be either:\n     * - the index of a wizard step with a `selected` directive, or\n     * - the default step index, set in the [[WizardComponent]]\n     */\n    /**\n     * Sets the initial default step.\n     * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n     *\n     * @param defaultStepIndex The new default wizard step index\n     */\n    defaultStepIndex: number;\n    /**\n     * The index of the currently visible and selected step inside the wizardSteps QueryList.\n     * If this wizard contains no steps, currentStepIndex is -1\n     */\n    currentStepIndex: number;\n    /**\n     * The navigation mode used to navigate inside the wizard\n     */\n    navigationMode: NavigationMode;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n    disableNavigationBar: boolean;\n    /**\n     * The WizardStep object belonging to the currently visible and selected step.\n     * The currentStep is always the currently selected wizard step.\n     * The currentStep can be either completed, if it was visited earlier,\n     * or not completed, if it is visited for the first time or its state is currently out of date.\n     *\n     * If this wizard contains no steps, currentStep is null\n     */\n    readonly currentStep: WizardStep;\n    /**\n     * The completeness of the wizard.\n     * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n     */\n    readonly completed: boolean;\n    /**\n     * Constructor\n     */\n    constructor();\n    /**\n     * Updates the navigation mode to the navigation mode with the given name\n     *\n     * @param updatedNavigationMode The name of the new navigation mode\n     */\n    updateNavigationMode(updatedNavigationMode: string): void;\n    /**\n     * Updates the wizard steps to the new array\n     *\n     * @param updatedWizardSteps The updated wizard steps\n     */\n    updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void;\n    /**\n     * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n     *\n     * @param stepIndex The to be checked index of a step inside this wizard\n     * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n     */\n    hasStep(stepIndex: number): boolean;\n    /**\n     * Checks if this wizard has a previous step, compared to the current step\n     *\n     * @returns True if this wizard has a previous step before the current step\n     */\n    hasPreviousStep(): boolean;\n    /**\n     * Checks if this wizard has a next step, compared to the current step\n     *\n     * @returns True if this wizard has a next step after the current step\n     */\n    hasNextStep(): boolean;\n    /**\n     * Checks if this wizard is currently inside its last step\n     *\n     * @returns True if the wizard is currently inside its last step\n     */\n    isLastStep(): boolean;\n    /**\n     * Finds the [[WizardStep]] at the given index `stepIndex`.\n     * If no [[WizardStep]] exists at the given index an Error is thrown\n     *\n     * @param stepIndex The given index\n     * @returns The found [[WizardStep]] at the given index `stepIndex`\n     * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n     */\n    getStepAtIndex(stepIndex: number): WizardStep;\n    /**\n     * Finds the index of the step with the given `stepId`.\n     * If no step with the given `stepId` exists, `-1` is returned\n     *\n     * @param stepId The given step id\n     * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n     */\n    getIndexOfStepWithId(stepId: string): number;\n    /**\n     * Finds the index of the given [[WizardStep]] `step`.\n     * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n     *\n     * @param step The given [[WizardStep]]\n     * @returns The found index of `step` or `-1` if the step is not included in the wizard\n     */\n    getIndexOfStep(step: WizardStep): number;\n    /**\n     * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n     *\n     * @param destinationStep The given destination step\n     * @returns The calculated [[MovingDirection]]\n     */\n    getMovingDirection(destinationStep: number): MovingDirection;\n}\n"]}