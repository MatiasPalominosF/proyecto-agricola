{"version":3,"file":"wizard.component.d.ts","sources":["wizard.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, OnChanges, QueryList, SimpleChanges } from '@angular/core';\nimport { WizardStep } from '../util/wizard-step.interface';\nimport { WizardState } from '../navigation/wizard-state.model';\nimport { NavigationMode } from '../navigation/navigation-mode.interface';\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\nexport declare class WizardComponent implements OnChanges, AfterContentInit {\n    model: WizardState;\n    /**\n     * A QueryList containing all [[WizardStep]]s inside this wizard\n     */\n    wizardSteps: QueryList<WizardStep>;\n    /**\n     * The location of the navigation bar inside the wizard.\n     * This location can be either top, bottom, left or right\n     */\n    navBarLocation: string;\n    /**\n     * The layout of the navigation bar inside the wizard.\n     * The layout can be either small, large-filled, large-empty or large-symbols\n     */\n    navBarLayout: string;\n    /**\n     * The direction in which the steps inside the navigation bar should be shown.\n     * The direction can be either `left-to-right` or `right-to-left`\n     */\n    navBarDirection: string;\n    /**\n     * The navigation mode used for transitioning between different steps.\n     * The navigation mode can be either `strict`, `semi-strict` or `free`\n     */\n    navigationMode: string;\n    /**\n     * The initially selected step, represented by its index\n     */\n    defaultStepIndex: number;\n    /**\n     * True, if the navigation bar shouldn't be used for navigating\n     */\n    disableNavigationBar: boolean;\n    /**\n     * Returns true if this wizard uses a horizontal orientation.\n     * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n     *\n     * @returns True if this wizard uses a horizontal orientation\n     */\n    readonly horizontalOrientation: boolean;\n    /**\n     * Returns true if this wizard uses a vertical orientation.\n     * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n     *\n     * @returns True if this wizard uses a vertical orientation\n     */\n    readonly verticalOrientation: boolean;\n    /**\n     * The navigation mode for this wizard\n     */\n    readonly navigation: NavigationMode;\n    /**\n     * Constructor\n     *\n     * @param model The model for this wizard component\n     */\n    constructor(model: WizardState);\n    /**\n     * Updates the model after certain input values have changed\n     *\n     * @param changes The detected changes\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Initialization work\n     */\n    ngAfterContentInit(): void;\n}\n"]}