{"ast":null,"code":"import { Observable, asyncScheduler } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nfunction _fromRef(ref) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(function () {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return function () {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nexport function fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\nexport function fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'value'\n    };\n  }));\n}\nexport function fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'query'\n    };\n  }));\n} //# sourceMappingURL=fromRef.js.map","map":{"version":3,"sources":["C:/Users/matia/Desktop/Proyecto/proyecto-agricola/node_modules/@angular/fire/firestore/es2015/observable/fromRef.js"],"names":["Observable","asyncScheduler","map","_fromRef","ref","scheduler","subscriber","unsubscribe","schedule","onSnapshot","fromRef","fromDocRef","pipe","payload","type","fromCollectionRef"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,MAA3C;AACA,SAASC,GAAT,QAAoB,gBAApB;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAmD;AAAA,MAA5BC,SAA4B,uEAAhBJ,cAAgB;AAC/C,SAAO,IAAID,UAAJ,CAAe,UAAAM,UAAU,EAAI;AAChC,QAAIC,WAAJ;;AACA,QAAIF,SAAS,IAAI,IAAjB,EAAuB;AACnBA,MAAAA,SAAS,CAACG,QAAV,CAAmB,YAAM;AACrBD,QAAAA,WAAW,GAAGH,GAAG,CAACK,UAAJ,CAAeH,UAAf,CAAd;AACH,OAFD;AAGH,KAJD,MAKK;AACDC,MAAAA,WAAW,GAAGH,GAAG,CAACK,UAAJ,CAAeH,UAAf,CAAd;AACH;;AACD,WAAO,YAAY;AACf,UAAIC,WAAW,IAAI,IAAnB,EAAyB;AACrBA,QAAAA,WAAW;AACd;AACJ,KAJD;AAKH,GAfM,CAAP;AAgBH;;AACD,OAAO,SAASG,OAAT,CAAiBN,GAAjB,EAAsBC,SAAtB,EAAiC;AACpC,SAAOF,QAAQ,CAACC,GAAD,EAAMC,SAAN,CAAf;AACH;AACD,OAAO,SAASM,UAAT,CAAoBP,GAApB,EAAyBC,SAAzB,EAAoC;AACvC,SAAOK,OAAO,CAACN,GAAD,EAAMC,SAAN,CAAP,CACFO,IADE,CACGV,GAAG,CAAC,UAAAW,OAAO;AAAA,WAAK;AAAEA,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,IAAI,EAAE;AAAjB,KAAL;AAAA,GAAR,CADN,CAAP;AAEH;AACD,OAAO,SAASC,iBAAT,CAA2BX,GAA3B,EAAgCC,SAAhC,EAA2C;AAC9C,SAAOK,OAAO,CAACN,GAAD,EAAMC,SAAN,CAAP,CAAwBO,IAAxB,CAA6BV,GAAG,CAAC,UAAAW,OAAO;AAAA,WAAK;AAAEA,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,IAAI,EAAE;AAAjB,KAAL;AAAA,GAAR,CAAhC,CAAP;AACH,C,CACD","sourcesContent":["import { Observable, asyncScheduler } from 'rxjs';\nimport { map } from 'rxjs/operators';\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n    return new Observable(subscriber => {\n        let unsubscribe;\n        if (scheduler != null) {\n            scheduler.schedule(() => {\n                unsubscribe = ref.onSnapshot(subscriber);\n            });\n        }\n        else {\n            unsubscribe = ref.onSnapshot(subscriber);\n        }\n        return function () {\n            if (unsubscribe != null) {\n                unsubscribe();\n            }\n        };\n    });\n}\nexport function fromRef(ref, scheduler) {\n    return _fromRef(ref, scheduler);\n}\nexport function fromDocRef(ref, scheduler) {\n    return fromRef(ref, scheduler)\n        .pipe(map(payload => ({ payload, type: 'value' })));\n}\nexport function fromCollectionRef(ref, scheduler) {\n    return fromRef(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n//# sourceMappingURL=fromRef.js.map"]},"metadata":{},"sourceType":"module"}